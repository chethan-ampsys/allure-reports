{"uid":"b3cba411b953c76c","name":"TC006- Login with Empty Password","fullName":"Xeed_Login_Page.Test_TC006#test_site","historyId":"f45f329c5867d2c9e24bfd565cf46155","time":{"start":1749207449067,"stop":1749207461970,"duration":12903},"description":"\n**Test Scenario:**  \nAttempt to log in using empty password  \nUsername: Rohit \nPassword: \n\n**Expected Result:**  \nUser should not be able to log in.\n\n**How it is evaluated:**  \nThis is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n","descriptionHtml":"<p><strong>Test Scenario:</strong><br />\nAttempt to log in using empty password<br />\nUsername: Rohit<br />\nPassword:</p>\n<p><strong>Expected Result:</strong><br />\nUser should not be able to log in.</p>\n<p><strong>How it is evaluated:</strong><br />\nThis is verified by checking the URL change; if the login is successful, the URL changes to <code>/dashboard</code>.</p>\n","status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40154ab997ffc651fd2ab92640638a6a\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC006- Login with Empty Password\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using empty password\n    Username: Rohit\n    Password:\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver,10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Waiting until the password field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Leaving the field empty\"):\n            element.send_keys(\"\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC006.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"40154ab997ffc651fd2ab92640638a6a\")>, method = <function url_contains.<locals>._predicate at 0x000001CEA5E6E0C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40154ab997ffc651fd2ab92640638a6a\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC006- Login with Empty Password\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using empty password\n    Username: Rohit\n    Password:\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver,10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Waiting until the password field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Leaving the field empty\"):\n            element.send_keys(\"\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed - URL did not change to dashboard\")\nE               Failed: Login failed - URL did not change to dashboard\n\nXeed_Login_Page\\Test_TC006.py:52: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1749207445092,"stop":1749207449066,"duration":3974},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"description":"\n**Test Scenario:**  \nAttempt to log in using empty password  \nUsername: Rohit \nPassword: \n\n**Expected Result:**  \nUser should not be able to log in.\n\n**How it is evaluated:**  \nThis is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n","status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40154ab997ffc651fd2ab92640638a6a\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC006- Login with Empty Password\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using empty password\n    Username: Rohit\n    Password:\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver,10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Waiting until the password field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Leaving the field empty\"):\n            element.send_keys(\"\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC006.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"40154ab997ffc651fd2ab92640638a6a\")>, method = <function url_contains.<locals>._predicate at 0x000001CEA5E6E0C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40154ab997ffc651fd2ab92640638a6a\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC006- Login with Empty Password\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using empty password\n    Username: Rohit\n    Password:\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver,10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid username\"):\n            element.send_keys(\"Rohit\")\n    \n        with allure.step(\"Waiting until the password field is displayed\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Leaving the field empty\"):\n            element.send_keys(\"\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Wait for URL to change to dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed - URL did not change to dashboard\")\nE               Failed: Login failed - URL did not change to dashboard\n\nXeed_Login_Page\\Test_TC006.py:52: Failed","steps":[{"name":"Login Page is Opened","time":{"start":1749207449067,"stop":1749207449182,"duration":115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Waiting until the username field is displayed","time":{"start":1749207449182,"stop":1749207451600,"duration":2418},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Typing the valid username","time":{"start":1749207451600,"stop":1749207451635,"duration":35},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Waiting until the password field is displayed","time":{"start":1749207451635,"stop":1749207451708,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Leaving the field empty","time":{"start":1749207451708,"stop":1749207451724,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Clicking the login button","time":{"start":1749207451724,"stop":1749207451786,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"Wait for URL to change to dashboard","time":{"start":1749207451786,"stop":1749207461968,"duration":10182},"status":"failed","statusMessage":"Failed: Login failed - URL did not change to dashboard\n","statusTrace":"  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\Xeed_Login_Page\\Test_TC006.py\", line 52, in test_site\n    pytest.fail(\"Login failed - URL did not change to dashboard\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"3e8396a90cd04981","name":"Current URL on failure","source":"3e8396a90cd04981.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false,"stepsCount":7,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1749207461976,"stop":1749207464268,"duration":2292},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"XEED_Ventures_Login_Page"},{"name":"parentSuite","value":"Xeed_Login_Page"},{"name":"suite","value":"Test_TC006"},{"name":"host","value":"DESKTOP-0Q1NQ4H"},{"name":"thread","value":"40464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Xeed_Login_Page.Test_TC006"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"setup","value":"'chrome'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b3cba411b953c76c.json","parameterValues":["'chrome'"]}