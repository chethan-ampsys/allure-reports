{"uid":"94d7640b63b05166","name":"TC_IO_001 - Initial Verification of a New Investor","fullName":"AIF_Investor_Onboarding.Test_IO_001#test_site","historyId":"149e699d24c9c752c93fcc65f498f732","time":{"start":1753277540752,"stop":1753277540752,"duration":0},"description":"\n**Test Scenario:**  \nAll the mandatory fields will be filled for submit\n\n**Expected Result:**  \nIt should jump to next Investor Profile page after submit\n\n**How it is evaluated:**  \nThis is verified by checking the URL change; if initial verification is successful, the URL changes to `/InvestorProfile` from '/AddNewInvestor'\n","descriptionHtml":"<p><strong>Test Scenario:</strong><br />\nAll the mandatory fields will be filled for submit</p>\n<p><strong>Expected Result:</strong><br />\nIt should jump to next Investor Profile page after submit</p>\n<p><strong>How it is evaluated:</strong><br />\nThis is verified by checking the URL change; if initial verification is successful, the URL changes to <code>/InvestorProfile</code> from '/AddNewInvestor'</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for MicrosoftEdge; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location","statusTrace":"self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x00000276F669B620>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n>               output = SeleniumManager().binary_paths(self._to_args())\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:54: in binary_paths\n    return self._run(args)\n           ^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = ['C:\\\\Users\\\\Chetan KM\\\\PycharmProjects\\\\TestingProject\\\\.venv\\\\Lib\\\\site-packages\\\\selenium\\\\webdriver\\\\common\\\\windows\\\\selenium-manager.exe', '--browser', 'MicrosoftEdge', '--language-binding', 'python', '--output', ...]\n\n    @staticmethod\n    def _run(args: list[str]) -> dict:\n        \"\"\"Executes the Selenium Manager Binary.\n    \n        :Args:\n         - args: the components of the command being executed.\n        :Returns: The log string containing the driver location.\n        \"\"\"\n        command = \" \".join(args)\n        logger.debug(\"Executing process: %s\", command)\n        try:\n            if sys.platform == \"win32\":\n                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)\n            else:\n                completed_proc = subprocess.run(args, capture_output=True)\n            stdout = completed_proc.stdout.decode(\"utf-8\").rstrip(\"\\n\")\n            stderr = completed_proc.stderr.decode(\"utf-8\").rstrip(\"\\n\")\n            output = json.loads(stdout) if stdout != \"\" else {\"logs\": [], \"result\": {}}\n        except Exception as err:\n            raise WebDriverException(f\"Unsuccessful command executed: {command}\") from err\n    \n        SeleniumManager._process_logs(output[\"logs\"])\n        result = output[\"result\"]\n        if completed_proc.returncode:\n>           raise WebDriverException(\n                f\"Unsuccessful command executed: {command}; code: {completed_proc.returncode}\\n{result}\\n{stderr}\"\n            )\nE           selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\windows\\selenium-manager.exe --browser MicrosoftEdge --language-binding python --output json; code: 65\nE           {'code': 65, 'message': 'error sending request for url (https://msedgedriver.azureedge.net/LATEST_RELEASE_138_WINDOWS)', 'driver_path': '', 'browser_path': ''}\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:128: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_site[edge]>>\n\n    @pytest.fixture(params=[\"edge\"])\n    def setup(request):\n>       driver = webdriver.Edge()\n                 ^^^^^^^^^^^^^^^^\n\nAIF_Investor_Onboarding\\conftest.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:47: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:53: in __init__\n    if finder.get_browser_path():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n           ^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x00000276F669B620>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f\"The driver path is not a valid file: {output['driver_path']}\")\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f\"The browser path is not a valid file: {output['browser_path']}\")\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for MicrosoftEdge; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:78: NoSuchDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1753277540753,"stop":1753277542273,"duration":1520},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for MicrosoftEdge; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n","statusTrace":"  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\AIF_Investor_Onboarding\\conftest.py\", line 42, in setup\n    driver = webdriver.Edge()\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py\", line 47, in __init__\n    super().__init__(\n    ~~~~~~~~~~~~~~~~^\n        browser_name=DesiredCapabilities.EDGE[\"browserName\"],\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<3 lines>...\n        keep_alive=keep_alive,\n        ^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 53, in __init__\n    if finder.get_browser_path():\n       ~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py\", line 47, in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n           ~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Chetan KM\\PycharmProjects\\TestingProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py\", line 78, in _binary_paths\n    raise NoSuchDriverException(msg) from err\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"feature","value":"AIF_Investor_Onboarding"},{"name":"parentSuite","value":"AIF_Investor_Onboarding"},{"name":"suite","value":"Test_IO_001"},{"name":"host","value":"HP"},{"name":"thread","value":"20920-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"AIF_Investor_Onboarding.Test_IO_001"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"setup","value":"'edge'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"94d7640b63b05166.json","parameterValues":["'edge'"]}