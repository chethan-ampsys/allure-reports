{"name": "TC008 - Verify Forgot Password Functionality", "status": "failed", "statusDetails": {"message": "Failed: Login failed â€” URL did not change to Dashboard.", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b51b6bffc77d81df265b93c6aefe84b4\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC008 - Verify Forgot Password Functionality\")\n    @allure.description(\"\"\"\n    **Test Type**\n    Functional and cross-browser testing\n    \n    **Test Scenario**\n    Reset the password using the 'Forgot Password' functionality, and then attempt to log in with the newly set password.\n    \n    **Expected Result**\n    The user should be able to log in successfully with the new password created via the 'Forgot Password' feature.\n    \n    **How it is evaluated**\n    After resetting the password, the test will attempt to log in with the updated credentials. Success is confirmed by checking whether the user is redirected to the dashboard URL.\n    \n    **Test will pass if**\n    The system accepts the new password and successfully redirects the user to the dashboard.\n    \"\"\")\n    \n    def test_suite(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Opening the Login Page\"):\n            driver.get(\"http://157.15.202.244:99/authentication/login\")\n    \n        with allure.step(\"Clicking on 'Forgot Password' link\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[normalize-space()='Forgot Password?']\")))\n            element.click()\n    \n        with allure.step(\"Entering email in the popup\"):\n            email_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='email']\")))\n            email_field.click()\n            email_field.send_keys(\"Sk12@gmail.com\")\n    \n        with allure.step(\"Entering a new password\"):\n            new_password_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='newPassword']\")))\n            new_password_field.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Confirming the new password\"):\n            confirm_password_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='confirmPassword']\")))\n            confirm_password_field.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Submitting the password reset form\"):\n            submit_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Submit']\")))\n            submit_button.click()\n    \n        with allure.step(\"Closing the successful password reset popup\"):\n            close_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='close-button']\")))\n            close_button.click()\n    \n        with allure.step(\"Entering login email\"):\n            login_email = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='email']\")))\n            login_email.click()\n            login_email.send_keys(\"Sk12@gmail.com\")\n    \n        with allure.step(\"Entering the new password\"):\n            login_password = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            login_password.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Clicking on 'Login' button\"):\n            login_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            login_button.click()\n    \n        with allure.step(\"Waiting for navigation to Dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC008.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b51b6bffc77d81df265b93c6aefe84b4\")>, method = <function url_contains.<locals>._predicate at 0x000001F65CA2B9C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b51b6bffc77d81df265b93c6aefe84b4\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC008 - Verify Forgot Password Functionality\")\n    @allure.description(\"\"\"\n    **Test Type**\n    Functional and cross-browser testing\n    \n    **Test Scenario**\n    Reset the password using the 'Forgot Password' functionality, and then attempt to log in with the newly set password.\n    \n    **Expected Result**\n    The user should be able to log in successfully with the new password created via the 'Forgot Password' feature.\n    \n    **How it is evaluated**\n    After resetting the password, the test will attempt to log in with the updated credentials. Success is confirmed by checking whether the user is redirected to the dashboard URL.\n    \n    **Test will pass if**\n    The system accepts the new password and successfully redirects the user to the dashboard.\n    \"\"\")\n    \n    def test_suite(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Opening the Login Page\"):\n            driver.get(\"http://157.15.202.244:99/authentication/login\")\n    \n        with allure.step(\"Clicking on 'Forgot Password' link\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//a[normalize-space()='Forgot Password?']\")))\n            element.click()\n    \n        with allure.step(\"Entering email in the popup\"):\n            email_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='email']\")))\n            email_field.click()\n            email_field.send_keys(\"Sk12@gmail.com\")\n    \n        with allure.step(\"Entering a new password\"):\n            new_password_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='newPassword']\")))\n            new_password_field.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Confirming the new password\"):\n            confirm_password_field = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@formcontrolname='confirmPassword']\")))\n            confirm_password_field.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Submitting the password reset form\"):\n            submit_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Submit']\")))\n            submit_button.click()\n    \n        with allure.step(\"Closing the successful password reset popup\"):\n            close_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[@class='close-button']\")))\n            close_button.click()\n    \n        with allure.step(\"Entering login email\"):\n            login_email = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='email']\")))\n            login_email.click()\n            login_email.send_keys(\"Sk12@gmail.com\")\n    \n        with allure.step(\"Entering the new password\"):\n            login_password = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            login_password.send_keys(\"Sk@123789\")\n    \n        with allure.step(\"Clicking on 'Login' button\"):\n            login_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            login_button.click()\n    \n        with allure.step(\"Waiting for navigation to Dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on Failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed â€” URL did not change to Dashboard.\")\nE               Failed: Login failed â€” URL did not change to Dashboard.\n\nXeed_Login_Page\\Test_TC008.py:76: Failed"}, "description": "\n**Test Type**  \nFunctional and cross-browser testing\n\n**Test Scenario**  \nReset the password using the 'Forgot Password' functionality, and then attempt to log in with the newly set password.\n\n**Expected Result**  \nThe user should be able to log in successfully with the new password created via the 'Forgot Password' feature.\n\n**How it is evaluated**  \nAfter resetting the password, the test will attempt to log in with the updated credentials. Success is confirmed by checking whether the user is redirected to the dashboard URL.\n\n**Test will pass if**  \nThe system accepts the new password and successfully redirects the user to the dashboard.\n", "steps": [{"name": "Opening the Login Page", "status": "passed", "start": 1750079915086, "stop": 1750079917482}, {"name": "Clicking on 'Forgot Password' link", "status": "passed", "start": 1750079917482, "stop": 1750079917709}, {"name": "Entering email in the popup", "status": "passed", "start": 1750079917709, "stop": 1750079918029}, {"name": "Entering a new password", "status": "passed", "start": 1750079918029, "stop": 1750079918192}, {"name": "Confirming the new password", "status": "passed", "start": 1750079918192, "stop": 1750079918292}, {"name": "Submitting the password reset form", "status": "passed", "start": 1750079918292, "stop": 1750079918365}, {"name": "Closing the successful password reset popup", "status": "passed", "start": 1750079918365, "stop": 1750079918439}, {"name": "Entering login email", "status": "passed", "start": 1750079918439, "stop": 1750079918620}, {"name": "Entering the new password", "status": "passed", "start": 1750079918620, "stop": 1750079918697}, {"name": "Clicking on 'Login' button", "status": "passed", "start": 1750079918697, "stop": 1750079918774}, {"name": "Waiting for navigation to Dashboard", "status": "failed", "statusDetails": {"message": "Failed: Login failed â€” URL did not change to Dashboard.\n", "trace": "  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\Xeed_Login_Page\\Test_TC008.py\", line 76, in test_suite\n    pytest.fail(\"Login failed â€” URL did not change to Dashboard.\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "Current URL on Failure", "source": "85db3e43-8b42-4427-9b0e-1a05dcba60de-attachment.txt", "type": "text/plain"}], "start": 1750079918774, "stop": 1750079928939}], "parameters": [{"name": "setup", "value": "'firefox'"}], "start": 1750079915086, "stop": 1750079928946, "uuid": "c1c3b075-891b-4a52-9b7d-f23a6d979923", "historyId": "0d8a8543dd53ef1cf7a2d412cc0d22b7", "testCaseId": "420fd8d26a625835831c94faa676242b", "fullName": "Xeed_Login_Page.Test_TC008#test_suite", "labels": [{"name": "feature", "value": "XEED_Ventures_Login_Page"}, {"name": "parentSuite", "value": "Xeed_Login_Page"}, {"name": "suite", "value": "Test_TC008"}, {"name": "host", "value": "DESKTOP-0Q1NQ4H"}, {"name": "thread", "value": "22056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Xeed_Login_Page.Test_TC008"}]}