{"name": "TC002 - Login with Invalid Username", "status": "failed", "statusDetails": {"message": "Failed: Login failed - URL did not change to dashboard", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72e0b58f14158bfbc11c55b21fe00cf3\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC002 - Login with Invalid Username\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using an invalid username\n    Username: Ohitr\n    Password: Erp@123\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed and it is clicked\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the invalid username\"):\n            element.send_keys(\"Ohitr\")\n    \n        with allure.step(\"Waiting until the password field is displayed and it is clicked\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid password\"):\n            element.send_keys(\"Erp@123\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Waiting for the URL to change to dashboard\"):\n            try:\n>               wait.until(EC.url_contains(\"/dashboard\"))\n\nXeed_Login_Page\\Test_TC002.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"72e0b58f14158bfbc11c55b21fe00cf3\")>, method = <function url_contains.<locals>._predicate at 0x000001CEA5DB3B00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"72e0b58f14158bfbc11c55b21fe00cf3\")>\n\n    @allure.feature(\"XEED_Ventures_Login_Page\")\n    @allure.title(\"TC002 - Login with Invalid Username\")\n    @allure.description(\"\"\"\n    **Test Scenario:**\n    Attempt to log in using an invalid username\n    Username: Ohitr\n    Password: Erp@123\n    \n    **Expected Result:**\n    User should not be able to log in.\n    \n    **How it is evaluated:**\n    This is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n    \"\"\")\n    \n    def test_site(setup):\n        driver = setup\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Login Page is Opened\"):\n            driver.get(\"http://157.15.202.244:88/authentication/login\")\n    \n        with allure.step(\"Waiting until the username field is displayed and it is clicked\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='username']\")))\n            element.click()\n    \n        with allure.step(\"Typing the invalid username\"):\n            element.send_keys(\"Ohitr\")\n    \n        with allure.step(\"Waiting until the password field is displayed and it is clicked\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//input[@id='password']\")))\n            element.click()\n    \n        with allure.step(\"Typing the valid password\"):\n            element.send_keys(\"Erp@123\")\n    \n        with allure.step(\"Clicking the login button\"):\n            element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[normalize-space()='Login']\")))\n            element.click()\n    \n        with allure.step(\"Waiting for the URL to change to dashboard\"):\n            try:\n                wait.until(EC.url_contains(\"/dashboard\"))\n            except:\n                allure.attach(driver.current_url, name=\"Current URL on failure\", attachment_type=allure.attachment_type.TEXT)\n>               pytest.fail(\"Login failed - URL did not change to dashboard\")\nE               Failed: Login failed - URL did not change to dashboard\n\nXeed_Login_Page\\Test_TC002.py:52: Failed"}, "description": "\n**Test Scenario:**  \nAttempt to log in using an invalid username  \nUsername: Ohitr  \nPassword: Erp@123\n\n**Expected Result:**  \nUser should not be able to log in.\n\n**How it is evaluated:**  \nThis is verified by checking the URL change; if the login is successful, the URL changes to `/dashboard`.\n", "steps": [{"name": "Login Page is Opened", "status": "passed", "start": 1749207176180, "stop": 1749207178208}, {"name": "Waiting until the username field is displayed and it is clicked", "status": "passed", "start": 1749207178208, "stop": 1749207178618}, {"name": "Typing the invalid username", "status": "passed", "start": 1749207178618, "stop": 1749207178677}, {"name": "Waiting until the password field is displayed and it is clicked", "status": "passed", "start": 1749207178677, "stop": 1749207178753}, {"name": "Typing the valid password", "status": "passed", "start": 1749207178753, "stop": 1749207178818}, {"name": "Clicking the login button", "status": "passed", "start": 1749207178818, "stop": 1749207178897}, {"name": "Waiting for the URL to change to dashboard", "status": "failed", "statusDetails": {"message": "Failed: Login failed - URL did not change to dashboard\n", "trace": "  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\Xeed_Login_Page\\Test_TC002.py\", line 52, in test_site\n    pytest.fail(\"Login failed - URL did not change to dashboard\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\sagar\\PycharmProjects\\TestingProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "Current URL on failure", "source": "adf71838-62ae-41eb-9fef-d05fc020f4e2-attachment.txt", "type": "text/plain"}], "start": 1749207178897, "stop": 1749207189045}], "parameters": [{"name": "setup", "value": "'chrome'"}], "start": 1749207176180, "stop": 1749207189058, "uuid": "b49ae4b7-4985-42de-8954-88b7cd13cf05", "historyId": "ac22a35cff932678b6a76ffcec67ec14", "testCaseId": "5b62a8058cedac8f10625d169a636db5", "fullName": "Xeed_Login_Page.Test_TC002#test_site", "labels": [{"name": "feature", "value": "XEED_Ventures_Login_Page"}, {"name": "parentSuite", "value": "Xeed_Login_Page"}, {"name": "suite", "value": "Test_TC002"}, {"name": "host", "value": "DESKTOP-0Q1NQ4H"}, {"name": "thread", "value": "40464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Xeed_Login_Page.Test_TC002"}]}